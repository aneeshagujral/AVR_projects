
touch_robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000452  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000452  000004c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000004d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000000a3  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000064b  00000000  00000000  00000cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001dc  00000000  00000000  00001342  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000005aa  00000000  00000000  0000151e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00001ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000154  00000000  00000000  00001ba8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000260  00000000  00000000  00001cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001f5c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e5       	ldi	r30, 0x52	; 82
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 a0 01 	call	0x340	; 0x340 <main>
  7a:	0c 94 27 02 	jmp	0x44e	; 0x44e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <adc_init>:
	lcd_cmd(0x0c);
	lcd_cmd(0x28);
}
void adc_init()
{
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  82:	87 e8       	ldi	r24, 0x87	; 135
  84:	86 b9       	out	0x06, r24	; 6
}
  86:	08 95       	ret

00000088 <adc_read>:
int adc_read(unsigned char ch)
{
	ADMUX=(0x40)|ch;
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	87 b9       	out	0x07, r24	; 7
	ADCSRA|=(1<<ADSC);
  8c:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADSC)));
  8e:	36 9b       	sbis	0x06, 6	; 6
  90:	fe cf       	rjmp	.-4      	; 0x8e <adc_read+0x6>
	ADCSRA|=1<<ADIF;
  92:	34 9a       	sbi	0x06, 4	; 6
	return (ADC);
  94:	24 b1       	in	r18, 0x04	; 4
  96:	35 b1       	in	r19, 0x05	; 5
}
  98:	82 2f       	mov	r24, r18
  9a:	93 2f       	mov	r25, r19
  9c:	08 95       	ret

0000009e <lcd_cmd>:
void lcd_cmd(char z)
{
	lcd=z&(0xf0);
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	92 bb       	out	0x12, r25	; 18
	lcd&=~(1<<rs);
  a4:	90 98       	cbi	0x12, 0	; 18
	lcd&=~(1<<rw);
  a6:	91 98       	cbi	0x12, 1	; 18
	lcd|=(1<<en);
  a8:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	e9 ef       	ldi	r30, 0xF9	; 249
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_cmd+0x10>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_cmd+0x16>
  b4:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
  b6:	92 98       	cbi	0x12, 2	; 18
	
	lcd=(z<<4)&(0xf0);
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	82 95       	swap	r24
  bc:	92 95       	swap	r25
  be:	90 7f       	andi	r25, 0xF0	; 240
  c0:	98 27       	eor	r25, r24
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	98 27       	eor	r25, r24
  c6:	82 bb       	out	0x12, r24	; 18
	lcd&=~(1<<rs);
  c8:	90 98       	cbi	0x12, 0	; 18
	lcd&=~(1<<rw);
  ca:	91 98       	cbi	0x12, 1	; 18
	lcd|=(1<<en);
  cc:	92 9a       	sbi	0x12, 2	; 18
  ce:	89 ef       	ldi	r24, 0xF9	; 249
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_cmd+0x34>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <lcd_cmd+0x3a>
  d8:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
  da:	92 98       	cbi	0x12, 2	; 18
}
  dc:	08 95       	ret

000000de <lcd_init>:
 

}
void lcd_init()
{
	lcd_cmd(0x01);
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_cmd>
	lcd_cmd(0x02);
  e4:	82 e0       	ldi	r24, 0x02	; 2
  e6:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_cmd>
	lcd_cmd(0x06);
  ea:	86 e0       	ldi	r24, 0x06	; 6
  ec:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_cmd>
	lcd_cmd(0x0c);
  f0:	8c e0       	ldi	r24, 0x0C	; 12
  f2:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_cmd>
	lcd_cmd(0x28);
  f6:	88 e2       	ldi	r24, 0x28	; 40
  f8:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_cmd>
}
  fc:	08 95       	ret

000000fe <lcd_data>:
	_delay_ms(1);
	lcd&=~(1<<en);
}
void lcd_data(char z)
{
	lcd=z&(0xf0);
  fe:	98 2f       	mov	r25, r24
 100:	90 7f       	andi	r25, 0xF0	; 240
 102:	92 bb       	out	0x12, r25	; 18
	lcd|=(1<<rs);
 104:	90 9a       	sbi	0x12, 0	; 18
	lcd&=~(1<<rw);
 106:	91 98       	cbi	0x12, 1	; 18
	lcd|=(1<<en);
 108:	92 9a       	sbi	0x12, 2	; 18
 10a:	e9 ef       	ldi	r30, 0xF9	; 249
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <lcd_data+0x10>
 112:	00 c0       	rjmp	.+0      	; 0x114 <lcd_data+0x16>
 114:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
 116:	92 98       	cbi	0x12, 2	; 18
	
	lcd=(z<<4)&(0xf0);
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	82 95       	swap	r24
 11c:	92 95       	swap	r25
 11e:	90 7f       	andi	r25, 0xF0	; 240
 120:	98 27       	eor	r25, r24
 122:	80 7f       	andi	r24, 0xF0	; 240
 124:	98 27       	eor	r25, r24
 126:	82 bb       	out	0x12, r24	; 18
	lcd|=(1<<rs);
 128:	90 9a       	sbi	0x12, 0	; 18
	lcd&=~(1<<rw);
 12a:	91 98       	cbi	0x12, 1	; 18
	lcd|=(1<<en);
 12c:	92 9a       	sbi	0x12, 2	; 18
 12e:	89 ef       	ldi	r24, 0xF9	; 249
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <lcd_data+0x34>
 136:	00 c0       	rjmp	.+0      	; 0x138 <lcd_data+0x3a>
 138:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
 13a:	92 98       	cbi	0x12, 2	; 18
}
 13c:	08 95       	ret

0000013e <number>:
	
	
	return 0;
}
void number(int q)
{
 13e:	cf 92       	push	r12
 140:	df 92       	push	r13
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24

	unsigned int i;
	lcd_cmd(0x04);
 150:	84 e0       	ldi	r24, 0x04	; 4
 152:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_cmd>
	while(q!=0)
 156:	20 97       	sbiw	r28, 0x00	; 0
 158:	91 f0       	breq	.+36     	; 0x17e <number+0x40>
	{
	int i=q%10;
 15a:	0a e0       	ldi	r16, 0x0A	; 10
 15c:	10 e0       	ldi	r17, 0x00	; 0
 15e:	ce 01       	movw	r24, r28
 160:	b8 01       	movw	r22, r16
 162:	0e 94 00 02 	call	0x400	; 0x400 <__divmodhi4>
 166:	e6 2e       	mov	r14, r22
 168:	f7 2e       	mov	r15, r23
	lcd_data(i+48);
 16a:	80 5d       	subi	r24, 0xD0	; 208
 16c:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_data>
	q=q/10;
 170:	ce 2c       	mov	r12, r14
 172:	e6 01       	movw	r28, r12
 174:	6e 01       	movw	r12, r28
 176:	df 2c       	mov	r13, r15
 178:	e6 01       	movw	r28, r12
void number(int q)
{

	unsigned int i;
	lcd_cmd(0x04);
	while(q!=0)
 17a:	20 97       	sbiw	r28, 0x00	; 0
 17c:	81 f7       	brne	.-32     	; 0x15e <number+0x20>
 17e:	8f ed       	ldi	r24, 0xDF	; 223
 180:	93 e9       	ldi	r25, 0x93	; 147
 182:	a4 e0       	ldi	r26, 0x04	; 4
 184:	81 50       	subi	r24, 0x01	; 1
 186:	90 40       	sbci	r25, 0x00	; 0
 188:	a0 40       	sbci	r26, 0x00	; 0
 18a:	e1 f7       	brne	.-8      	; 0x184 <number+0x46>
 18c:	00 c0       	rjmp	.+0      	; 0x18e <number+0x50>
 18e:	00 00       	nop
	lcd_data(i+48);
	q=q/10;
	
	}
	_delay_ms(1500);
	lcd_cmd(0x06);
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_cmd>
 

}
 196:	df 91       	pop	r29
 198:	cf 91       	pop	r28
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	df 90       	pop	r13
 1a4:	cf 90       	pop	r12
 1a6:	08 95       	ret

000001a8 <lcd_str>:
	lcd|=(1<<en);
	_delay_ms(1);
	lcd&=~(1<<en);
}
void lcd_str(char *str)
{
 1a8:	cf 93       	push	r28
 1aa:	df 93       	push	r29
 1ac:	ec 01       	movw	r28, r24
	int i;
	while(str[i]!=0)
 1ae:	88 81       	ld	r24, Y
 1b0:	88 23       	and	r24, r24
 1b2:	31 f0       	breq	.+12     	; 0x1c0 <lcd_str+0x18>
	lcd&=~(1<<rw);
	lcd|=(1<<en);
	_delay_ms(1);
	lcd&=~(1<<en);
}
void lcd_str(char *str)
 1b4:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	while(str[i]!=0)
	{
		
		lcd_data(str[i]);
 1b6:	0e 94 7f 00 	call	0xfe	; 0xfe <lcd_data>
	lcd&=~(1<<en);
}
void lcd_str(char *str)
{
	int i;
	while(str[i]!=0)
 1ba:	89 91       	ld	r24, Y+
 1bc:	88 23       	and	r24, r24
 1be:	d9 f7       	brne	.-10     	; 0x1b6 <lcd_str+0xe>
	{
		
		lcd_data(str[i]);
		i++;
	}
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <straight>:
}
void straight()
{
	while(1)
	{
		PORTB=0b00000101;
 1c6:	85 e0       	ldi	r24, 0x05	; 5
 1c8:	88 bb       	out	0x18, r24	; 24
 1ca:	fe cf       	rjmp	.-4      	; 0x1c8 <straight+0x2>

000001cc <right>:
}
void right()
{
	while(1)
	{
		PORTB=0b00000100;
 1cc:	94 e0       	ldi	r25, 0x04	; 4
		_delay_ms(10000);
		PORTB=0b00000101;
 1ce:	85 e0       	ldi	r24, 0x05	; 5
}
void right()
{
	while(1)
	{
		PORTB=0b00000100;
 1d0:	98 bb       	out	0x18, r25	; 24
 1d2:	2f e7       	ldi	r18, 0x7F	; 127
 1d4:	34 e8       	ldi	r19, 0x84	; 132
 1d6:	4e e1       	ldi	r20, 0x1E	; 30
 1d8:	21 50       	subi	r18, 0x01	; 1
 1da:	30 40       	sbci	r19, 0x00	; 0
 1dc:	40 40       	sbci	r20, 0x00	; 0
 1de:	e1 f7       	brne	.-8      	; 0x1d8 <right+0xc>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <right+0x16>
 1e2:	00 00       	nop
		_delay_ms(10000);
		PORTB=0b00000101;
 1e4:	88 bb       	out	0x18, r24	; 24
 1e6:	f4 cf       	rjmp	.-24     	; 0x1d0 <right+0x4>

000001e8 <left>:
}
void left()
{
	while(1)
	{
		PORTB=0b00000001;
 1e8:	91 e0       	ldi	r25, 0x01	; 1
		_delay_ms(10000);
		PORTB=0b00000101;
 1ea:	85 e0       	ldi	r24, 0x05	; 5
}
void left()
{
	while(1)
	{
		PORTB=0b00000001;
 1ec:	98 bb       	out	0x18, r25	; 24
 1ee:	2f e7       	ldi	r18, 0x7F	; 127
 1f0:	34 e8       	ldi	r19, 0x84	; 132
 1f2:	4e e1       	ldi	r20, 0x1E	; 30
 1f4:	21 50       	subi	r18, 0x01	; 1
 1f6:	30 40       	sbci	r19, 0x00	; 0
 1f8:	40 40       	sbci	r20, 0x00	; 0
 1fa:	e1 f7       	brne	.-8      	; 0x1f4 <left+0xc>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <left+0x16>
 1fe:	00 00       	nop
		_delay_ms(10000);
		PORTB=0b00000101;
 200:	88 bb       	out	0x18, r24	; 24
 202:	f4 cf       	rjmp	.-24     	; 0x1ec <left+0x4>

00000204 <stop>:
}
void stop()
{
	while(1)
	{
		PORTB=0b00000000;
 204:	18 ba       	out	0x18, r1	; 24
 206:	fe cf       	rjmp	.-4      	; 0x204 <stop>

00000208 <led>:
		i++;
	}
}
void led(int a, int b)
{
	if((a>130)&(a<188)&(b>100)&(b<195))
 208:	28 2f       	mov	r18, r24
 20a:	39 2f       	mov	r19, r25
 20c:	c9 01       	movw	r24, r18
 20e:	23 58       	subi	r18, 0x83	; 131
 210:	30 40       	sbci	r19, 0x00	; 0
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	29 33       	cpi	r18, 0x39	; 57
 216:	31 05       	cpc	r19, r1
 218:	08 f0       	brcs	.+2      	; 0x21c <led+0x14>
 21a:	40 e0       	ldi	r20, 0x00	; 0
 21c:	21 e0       	ldi	r18, 0x01	; 1
 21e:	65 36       	cpi	r22, 0x65	; 101
 220:	71 05       	cpc	r23, r1
 222:	0c f4       	brge	.+2      	; 0x226 <led+0x1e>
 224:	20 e0       	ldi	r18, 0x00	; 0
 226:	42 23       	and	r20, r18
 228:	50 e0       	ldi	r21, 0x00	; 0
 22a:	21 e0       	ldi	r18, 0x01	; 1
 22c:	30 e0       	ldi	r19, 0x00	; 0
 22e:	63 3c       	cpi	r22, 0xC3	; 195
 230:	71 05       	cpc	r23, r1
 232:	14 f0       	brlt	.+4      	; 0x238 <led+0x30>
 234:	20 e0       	ldi	r18, 0x00	; 0
 236:	30 e0       	ldi	r19, 0x00	; 0
 238:	24 23       	and	r18, r20
 23a:	35 23       	and	r19, r21
 23c:	21 15       	cp	r18, r1
 23e:	31 05       	cpc	r19, r1
 240:	61 f0       	breq	.+24     	; 0x25a <led+0x52>
	{
		straight();
 242:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <straight>
 246:	8f e3       	ldi	r24, 0x3F	; 63
 248:	92 e4       	ldi	r25, 0x42	; 66
 24a:	af e0       	ldi	r26, 0x0F	; 15
 24c:	81 50       	subi	r24, 0x01	; 1
 24e:	90 40       	sbci	r25, 0x00	; 0
 250:	a0 40       	sbci	r26, 0x00	; 0
 252:	e1 f7       	brne	.-8      	; 0x24c <led+0x44>
 254:	00 c0       	rjmp	.+0      	; 0x256 <led+0x4e>
 256:	00 00       	nop
 258:	08 95       	ret
		_delay_ms(5000);
	}
	else if((a>100)&(a<195)&(b>110)&(b<198))
 25a:	fc 01       	movw	r30, r24
 25c:	e5 56       	subi	r30, 0x65	; 101
 25e:	f0 40       	sbci	r31, 0x00	; 0
 260:	41 e0       	ldi	r20, 0x01	; 1
 262:	ee 35       	cpi	r30, 0x5E	; 94
 264:	f1 05       	cpc	r31, r1
 266:	08 f0       	brcs	.+2      	; 0x26a <led+0x62>
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	21 e0       	ldi	r18, 0x01	; 1
 26c:	6f 36       	cpi	r22, 0x6F	; 111
 26e:	71 05       	cpc	r23, r1
 270:	0c f4       	brge	.+2      	; 0x274 <led+0x6c>
 272:	20 e0       	ldi	r18, 0x00	; 0
 274:	42 23       	and	r20, r18
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	21 e0       	ldi	r18, 0x01	; 1
 27a:	30 e0       	ldi	r19, 0x00	; 0
 27c:	66 3c       	cpi	r22, 0xC6	; 198
 27e:	71 05       	cpc	r23, r1
 280:	14 f0       	brlt	.+4      	; 0x286 <led+0x7e>
 282:	20 e0       	ldi	r18, 0x00	; 0
 284:	30 e0       	ldi	r19, 0x00	; 0
 286:	24 23       	and	r18, r20
 288:	35 23       	and	r19, r21
 28a:	21 15       	cp	r18, r1
 28c:	31 05       	cpc	r19, r1
 28e:	61 f0       	breq	.+24     	; 0x2a8 <led+0xa0>
	{
		right();
 290:	0e 94 e6 00 	call	0x1cc	; 0x1cc <right>
 294:	8f e3       	ldi	r24, 0x3F	; 63
 296:	92 e4       	ldi	r25, 0x42	; 66
 298:	af e0       	ldi	r26, 0x0F	; 15
 29a:	81 50       	subi	r24, 0x01	; 1
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	a0 40       	sbci	r26, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <led+0x92>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <led+0x9c>
 2a4:	00 00       	nop
 2a6:	08 95       	ret
		_delay_ms(5000);
	}
	else if((a>220)&(a<256)&(b>160)&(b<215))
 2a8:	fc 01       	movw	r30, r24
 2aa:	ed 5d       	subi	r30, 0xDD	; 221
 2ac:	f0 40       	sbci	r31, 0x00	; 0
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	e3 32       	cpi	r30, 0x23	; 35
 2b2:	f1 05       	cpc	r31, r1
 2b4:	08 f0       	brcs	.+2      	; 0x2b8 <led+0xb0>
 2b6:	40 e0       	ldi	r20, 0x00	; 0
 2b8:	21 e0       	ldi	r18, 0x01	; 1
 2ba:	61 3a       	cpi	r22, 0xA1	; 161
 2bc:	71 05       	cpc	r23, r1
 2be:	0c f4       	brge	.+2      	; 0x2c2 <led+0xba>
 2c0:	20 e0       	ldi	r18, 0x00	; 0
 2c2:	42 23       	and	r20, r18
 2c4:	50 e0       	ldi	r21, 0x00	; 0
 2c6:	21 e0       	ldi	r18, 0x01	; 1
 2c8:	30 e0       	ldi	r19, 0x00	; 0
 2ca:	67 3d       	cpi	r22, 0xD7	; 215
 2cc:	71 05       	cpc	r23, r1
 2ce:	14 f0       	brlt	.+4      	; 0x2d4 <led+0xcc>
 2d0:	20 e0       	ldi	r18, 0x00	; 0
 2d2:	30 e0       	ldi	r19, 0x00	; 0
 2d4:	24 23       	and	r18, r20
 2d6:	35 23       	and	r19, r21
 2d8:	21 15       	cp	r18, r1
 2da:	31 05       	cpc	r19, r1
 2dc:	61 f0       	breq	.+24     	; 0x2f6 <led+0xee>
	{
		left();
 2de:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <left>
 2e2:	8f e3       	ldi	r24, 0x3F	; 63
 2e4:	92 e4       	ldi	r25, 0x42	; 66
 2e6:	af e0       	ldi	r26, 0x0F	; 15
 2e8:	81 50       	subi	r24, 0x01	; 1
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	a0 40       	sbci	r26, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <led+0xe0>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <led+0xea>
 2f2:	00 00       	nop
 2f4:	08 95       	ret
		_delay_ms(5000);
	}
	else if((a>110)&(a<170)&(b>=112)&(b<160))
 2f6:	8f 56       	subi	r24, 0x6F	; 111
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	21 e0       	ldi	r18, 0x01	; 1
 2fc:	8b 33       	cpi	r24, 0x3B	; 59
 2fe:	91 05       	cpc	r25, r1
 300:	08 f0       	brcs	.+2      	; 0x304 <led+0xfc>
 302:	20 e0       	ldi	r18, 0x00	; 0
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	60 37       	cpi	r22, 0x70	; 112
 308:	71 05       	cpc	r23, r1
 30a:	0c f4       	brge	.+2      	; 0x30e <led+0x106>
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	28 23       	and	r18, r24
 310:	30 e0       	ldi	r19, 0x00	; 0
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e0       	ldi	r25, 0x00	; 0
 316:	60 3a       	cpi	r22, 0xA0	; 160
 318:	71 05       	cpc	r23, r1
 31a:	14 f0       	brlt	.+4      	; 0x320 <led+0x118>
 31c:	80 e0       	ldi	r24, 0x00	; 0
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	82 23       	and	r24, r18
 322:	93 23       	and	r25, r19
 324:	00 97       	sbiw	r24, 0x00	; 0
 326:	59 f0       	breq	.+22     	; 0x33e <led+0x136>
	{
		stop();
 328:	0e 94 02 01 	call	0x204	; 0x204 <stop>
 32c:	8f e7       	ldi	r24, 0x7F	; 127
 32e:	94 e8       	ldi	r25, 0x84	; 132
 330:	ae e1       	ldi	r26, 0x1E	; 30
 332:	81 50       	subi	r24, 0x01	; 1
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	a0 40       	sbci	r26, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <led+0x12a>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <led+0x134>
 33c:	00 00       	nop
 33e:	08 95       	ret

00000340 <main>:
void straight();
void left();
void right();
void stop();
int main()
{
 340:	bf 92       	push	r11
 342:	cf 92       	push	r12
 344:	df 92       	push	r13
 346:	ef 92       	push	r14
 348:	ff 92       	push	r15
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
	DDRD=0xff;
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	81 bb       	out	0x11, r24	; 17
	DDRB=0xff;
 356:	87 bb       	out	0x17, r24	; 23
	char *p;
	
	int i,a,b;
	lcd_init();
 358:	0e 94 6f 00 	call	0xde	; 0xde <lcd_init>
	lcd_cmd(0x80);
 35c:	80 e8       	ldi	r24, 0x80	; 128
 35e:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_cmd>
	adc_init();
 362:	0e 94 41 00 	call	0x82	; 0x82 <adc_init>
	{
		//for x
		char *p;
		char a;
		char b;
		DDRA=0b00000101;
 366:	0f 2e       	mov	r0, r31
 368:	f5 e0       	ldi	r31, 0x05	; 5
 36a:	ef 2e       	mov	r14, r31
 36c:	f0 2d       	mov	r31, r0
		PORTA=0b00001100;
 36e:	0f 2e       	mov	r0, r31
 370:	fc e0       	ldi	r31, 0x0C	; 12
 372:	ff 2e       	mov	r15, r31
 374:	f0 2d       	mov	r31, r0
		a=adc_read(1);
		lcd_cmd(0x80);
		p="x-axis: ";
		lcd_str(p);
 376:	c0 e6       	ldi	r28, 0x60	; 96
 378:	d0 e0       	ldi	r29, 0x00	; 0
		number(a);
		_delay_ms(50);
		
		//for y
		char *g;
		DDRA=0b00001010;
 37a:	0f 2e       	mov	r0, r31
 37c:	fa e0       	ldi	r31, 0x0A	; 10
 37e:	bf 2e       	mov	r11, r31
 380:	f0 2d       	mov	r31, r0
		PORTA=0b00001100;
		b=adc_read(2);
		lcd_cmd(0xc0);
		g="y-axis: ";
		lcd_str(g);
 382:	0f 2e       	mov	r0, r31
 384:	f9 e6       	ldi	r31, 0x69	; 105
 386:	cf 2e       	mov	r12, r31
 388:	f0 e0       	ldi	r31, 0x00	; 0
 38a:	df 2e       	mov	r13, r31
 38c:	f0 2d       	mov	r31, r0
	{
		//for x
		char *p;
		char a;
		char b;
		DDRA=0b00000101;
 38e:	ea ba       	out	0x1a, r14	; 26
		PORTA=0b00001100;
 390:	fb ba       	out	0x1b, r15	; 27
		a=adc_read(1);
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 44 00 	call	0x88	; 0x88 <adc_read>
 398:	08 2f       	mov	r16, r24
		lcd_cmd(0x80);
 39a:	80 e8       	ldi	r24, 0x80	; 128
 39c:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_cmd>
		p="x-axis: ";
		lcd_str(p);
 3a0:	ce 01       	movw	r24, r28
 3a2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_str>
		lcd_cmd(0x8C);
 3a6:	8c e8       	ldi	r24, 0x8C	; 140
 3a8:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_cmd>
		number(a);
 3ac:	80 2f       	mov	r24, r16
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	0e 94 9f 00 	call	0x13e	; 0x13e <number>
 3b4:	83 ed       	ldi	r24, 0xD3	; 211
 3b6:	90 e3       	ldi	r25, 0x30	; 48
 3b8:	01 97       	sbiw	r24, 0x01	; 1
 3ba:	f1 f7       	brne	.-4      	; 0x3b8 <main+0x78>
 3bc:	00 c0       	rjmp	.+0      	; 0x3be <main+0x7e>
 3be:	00 00       	nop
		_delay_ms(50);
		
		//for y
		char *g;
		DDRA=0b00001010;
 3c0:	ba ba       	out	0x1a, r11	; 26
		PORTA=0b00001100;
 3c2:	fb ba       	out	0x1b, r15	; 27
		b=adc_read(2);
 3c4:	82 e0       	ldi	r24, 0x02	; 2
 3c6:	0e 94 44 00 	call	0x88	; 0x88 <adc_read>
 3ca:	18 2f       	mov	r17, r24
		lcd_cmd(0xc0);
 3cc:	80 ec       	ldi	r24, 0xC0	; 192
 3ce:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_cmd>
		g="y-axis: ";
		lcd_str(g);
 3d2:	c6 01       	movw	r24, r12
 3d4:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <lcd_str>
		lcd_cmd(0xCA);
 3d8:	8a ec       	ldi	r24, 0xCA	; 202
 3da:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_cmd>
		number(b);
 3de:	81 2f       	mov	r24, r17
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	0e 94 9f 00 	call	0x13e	; 0x13e <number>
 3e6:	83 ed       	ldi	r24, 0xD3	; 211
 3e8:	90 e3       	ldi	r25, 0x30	; 48
 3ea:	01 97       	sbiw	r24, 0x01	; 1
 3ec:	f1 f7       	brne	.-4      	; 0x3ea <main+0xaa>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0xb0>
 3f0:	00 00       	nop
		_delay_ms(50);
		
		led(a,b);
 3f2:	80 2f       	mov	r24, r16
 3f4:	90 e0       	ldi	r25, 0x00	; 0
 3f6:	61 2f       	mov	r22, r17
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	0e 94 04 01 	call	0x208	; 0x208 <led>
 3fe:	c7 cf       	rjmp	.-114    	; 0x38e <main+0x4e>

00000400 <__divmodhi4>:
 400:	97 fb       	bst	r25, 7
 402:	09 2e       	mov	r0, r25
 404:	07 26       	eor	r0, r23
 406:	0a d0       	rcall	.+20     	; 0x41c <__divmodhi4_neg1>
 408:	77 fd       	sbrc	r23, 7
 40a:	04 d0       	rcall	.+8      	; 0x414 <__divmodhi4_neg2>
 40c:	0c d0       	rcall	.+24     	; 0x426 <__udivmodhi4>
 40e:	06 d0       	rcall	.+12     	; 0x41c <__divmodhi4_neg1>
 410:	00 20       	and	r0, r0
 412:	1a f4       	brpl	.+6      	; 0x41a <__divmodhi4_exit>

00000414 <__divmodhi4_neg2>:
 414:	70 95       	com	r23
 416:	61 95       	neg	r22
 418:	7f 4f       	sbci	r23, 0xFF	; 255

0000041a <__divmodhi4_exit>:
 41a:	08 95       	ret

0000041c <__divmodhi4_neg1>:
 41c:	f6 f7       	brtc	.-4      	; 0x41a <__divmodhi4_exit>
 41e:	90 95       	com	r25
 420:	81 95       	neg	r24
 422:	9f 4f       	sbci	r25, 0xFF	; 255
 424:	08 95       	ret

00000426 <__udivmodhi4>:
 426:	aa 1b       	sub	r26, r26
 428:	bb 1b       	sub	r27, r27
 42a:	51 e1       	ldi	r21, 0x11	; 17
 42c:	07 c0       	rjmp	.+14     	; 0x43c <__udivmodhi4_ep>

0000042e <__udivmodhi4_loop>:
 42e:	aa 1f       	adc	r26, r26
 430:	bb 1f       	adc	r27, r27
 432:	a6 17       	cp	r26, r22
 434:	b7 07       	cpc	r27, r23
 436:	10 f0       	brcs	.+4      	; 0x43c <__udivmodhi4_ep>
 438:	a6 1b       	sub	r26, r22
 43a:	b7 0b       	sbc	r27, r23

0000043c <__udivmodhi4_ep>:
 43c:	88 1f       	adc	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	5a 95       	dec	r21
 442:	a9 f7       	brne	.-22     	; 0x42e <__udivmodhi4_loop>
 444:	80 95       	com	r24
 446:	90 95       	com	r25
 448:	bc 01       	movw	r22, r24
 44a:	cd 01       	movw	r24, r26
 44c:	08 95       	ret

0000044e <_exit>:
 44e:	f8 94       	cli

00000450 <__stop_program>:
 450:	ff cf       	rjmp	.-2      	; 0x450 <__stop_program>
