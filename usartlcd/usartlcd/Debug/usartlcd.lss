
usartlcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000182  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000934  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000006a  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000342  00000000  00000000  000009be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000017b  00000000  00000000  00000d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003aa  00000000  00000000  00000e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001228  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000012e  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000074  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  0000144a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 90 00 	call	0x120	; 0x120 <main>
  64:	0c 94 bf 00 	jmp	0x17e	; 0x17e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <usart_init>:
	}
	return 0;
}
void usart_init()
{
	UBRRL=ubrr_value;
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	89 b9       	out	0x09, r24	; 9
	UBRRH=(ubrr_value>>8);
  70:	83 e0       	ldi	r24, 0x03	; 3
  72:	80 bd       	out	0x20, r24	; 32
	UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1);
  74:	86 e8       	ldi	r24, 0x86	; 134
  76:	80 bd       	out	0x20, r24	; 32
	
	UCSRB=(1<<TXEN)|(1<<RXEN);
  78:	88 e1       	ldi	r24, 0x18	; 24
  7a:	8a b9       	out	0x0a, r24	; 10
}
  7c:	08 95       	ret

0000007e <usart_rec>:
char usart_rec()
{
	while(!(UCSRA&(1<<RXC)))
  7e:	5f 9b       	sbis	0x0b, 7	; 11
  80:	fe cf       	rjmp	.-4      	; 0x7e <usart_rec>
	{
		
	}
	return UDR;
  82:	8c b1       	in	r24, 0x0c	; 12
}
  84:	08 95       	ret

00000086 <lcd_cmd>:
	lcd_cmd(0x0c);
	lcd_cmd(0x28);
}
void lcd_cmd(char z)
{
	lcd=z&(0xf0);
  86:	98 2f       	mov	r25, r24
  88:	90 7f       	andi	r25, 0xF0	; 240
  8a:	92 bb       	out	0x12, r25	; 18
	lcd&=~(1<<rs);
  8c:	90 98       	cbi	0x12, 0	; 18
	lcd&=~(1<<rw);
  8e:	91 98       	cbi	0x12, 1	; 18
	lcd|=(1<<en);
  90:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	e9 ef       	ldi	r30, 0xF9	; 249
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <lcd_cmd+0x10>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <lcd_cmd+0x16>
  9c:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
  9e:	92 98       	cbi	0x12, 2	; 18
	
	lcd=(z<<4)&(0xf0);
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	82 95       	swap	r24
  a4:	92 95       	swap	r25
  a6:	90 7f       	andi	r25, 0xF0	; 240
  a8:	98 27       	eor	r25, r24
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	98 27       	eor	r25, r24
  ae:	82 bb       	out	0x12, r24	; 18
	lcd&=~(1<<rs);
  b0:	90 98       	cbi	0x12, 0	; 18
	lcd&=~(1<<rw);
  b2:	91 98       	cbi	0x12, 1	; 18
	lcd|=(1<<en);
  b4:	92 9a       	sbi	0x12, 2	; 18
  b6:	89 ef       	ldi	r24, 0xF9	; 249
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	01 97       	sbiw	r24, 0x01	; 1
  bc:	f1 f7       	brne	.-4      	; 0xba <lcd_cmd+0x34>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <lcd_cmd+0x3a>
  c0:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
  c2:	92 98       	cbi	0x12, 2	; 18
}
  c4:	08 95       	ret

000000c6 <lcd_init>:
}

void lcd_init()
{
//	lcd_cmd(0x01);
	lcd_cmd(0x02);
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	0e 94 43 00 	call	0x86	; 0x86 <lcd_cmd>
	lcd_cmd(0x06);
  cc:	86 e0       	ldi	r24, 0x06	; 6
  ce:	0e 94 43 00 	call	0x86	; 0x86 <lcd_cmd>
	lcd_cmd(0x0c);
  d2:	8c e0       	ldi	r24, 0x0C	; 12
  d4:	0e 94 43 00 	call	0x86	; 0x86 <lcd_cmd>
	lcd_cmd(0x28);
  d8:	88 e2       	ldi	r24, 0x28	; 40
  da:	0e 94 43 00 	call	0x86	; 0x86 <lcd_cmd>
}
  de:	08 95       	ret

000000e0 <lcd_data>:
	_delay_ms(1);
	lcd&=~(1<<en);
}
void lcd_data(char z)
{
	lcd=z&(0xf0);
  e0:	98 2f       	mov	r25, r24
  e2:	90 7f       	andi	r25, 0xF0	; 240
  e4:	92 bb       	out	0x12, r25	; 18
	lcd|=(1<<rs);
  e6:	90 9a       	sbi	0x12, 0	; 18
	lcd&=~(1<<rw);
  e8:	91 98       	cbi	0x12, 1	; 18
	lcd|=(1<<en);
  ea:	92 9a       	sbi	0x12, 2	; 18
  ec:	e9 ef       	ldi	r30, 0xF9	; 249
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	31 97       	sbiw	r30, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <lcd_data+0x10>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_data+0x16>
  f6:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
  f8:	92 98       	cbi	0x12, 2	; 18
	
	lcd=(z<<4)&(0xf0);
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	82 95       	swap	r24
  fe:	92 95       	swap	r25
 100:	90 7f       	andi	r25, 0xF0	; 240
 102:	98 27       	eor	r25, r24
 104:	80 7f       	andi	r24, 0xF0	; 240
 106:	98 27       	eor	r25, r24
 108:	82 bb       	out	0x12, r24	; 18
	lcd|=(1<<rs);
 10a:	90 9a       	sbi	0x12, 0	; 18
	lcd&=~(1<<rw);
 10c:	91 98       	cbi	0x12, 1	; 18
	lcd|=(1<<en);
 10e:	92 9a       	sbi	0x12, 2	; 18
 110:	89 ef       	ldi	r24, 0xF9	; 249
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <lcd_data+0x34>
 118:	00 c0       	rjmp	.+0      	; 0x11a <lcd_data+0x3a>
 11a:	00 00       	nop
	_delay_ms(1);
	lcd&=~(1<<en);
 11c:	92 98       	cbi	0x12, 2	; 18
}
 11e:	08 95       	ret

00000120 <main>:
void usart_init();
void usart_send(char i);
char usart_rec();

int main(void)
{
 120:	1f 93       	push	r17
    DDRB=0xff;
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	87 bb       	out	0x17, r24	; 23
	DDRD=0xff;
 126:	81 bb       	out	0x11, r24	; 17
	lcd_init();
 128:	0e 94 63 00 	call	0xc6	; 0xc6 <lcd_init>
	usart_init();
 12c:	0e 94 36 00 	call	0x6c	; 0x6c <usart_init>
	
	lcd_cmd(0x80);
 130:	80 e8       	ldi	r24, 0x80	; 128
 132:	0e 94 43 00 	call	0x86	; 0x86 <lcd_cmd>
	while(1)
	{
		
		
		char x;
		x=usart_rec();
 136:	0e 94 3f 00 	call	0x7e	; 0x7e <usart_rec>
 13a:	18 2f       	mov	r17, r24
 13c:	83 ec       	ldi	r24, 0xC3	; 195
 13e:	99 e0       	ldi	r25, 0x09	; 9
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <main+0x20>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0x26>
 146:	00 00       	nop
		char c=c;
		_delay_ms(10);
		lcd_data(x);
 148:	81 2f       	mov	r24, r17
 14a:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_data>
		q++;
		if(x==c)
 14e:	11 23       	and	r17, r17
 150:	91 f7       	brne	.-28     	; 0x136 <main+0x16>
		{
			lcd_cmd(0x01);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 43 00 	call	0x86	; 0x86 <lcd_cmd>
			lcd_cmd(0x04);
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	0e 94 43 00 	call	0x86	; 0x86 <lcd_cmd>
 15e:	eb cf       	rjmp	.-42     	; 0x136 <main+0x16>

00000160 <lcd_str>:
	lcd|=(1<<en);
	_delay_ms(1);
	lcd&=~(1<<en);
}
void lcd_str(char *str)
{
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	ec 01       	movw	r28, r24
	int i;
	while(str[i]!=0)
 166:	88 81       	ld	r24, Y
 168:	88 23       	and	r24, r24
 16a:	31 f0       	breq	.+12     	; 0x178 <lcd_str+0x18>
	lcd&=~(1<<rw);
	lcd|=(1<<en);
	_delay_ms(1);
	lcd&=~(1<<en);
}
void lcd_str(char *str)
 16c:	21 96       	adiw	r28, 0x01	; 1
{
	int i;
	while(str[i]!=0)
	{
		
		lcd_data(str[i]);
 16e:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_data>
	lcd&=~(1<<en);
}
void lcd_str(char *str)
{
	int i;
	while(str[i]!=0)
 172:	89 91       	ld	r24, Y+
 174:	88 23       	and	r24, r24
 176:	d9 f7       	brne	.-10     	; 0x16e <lcd_str+0xe>
	{
		
		lcd_data(str[i]);
		i++;
	}
 178:	df 91       	pop	r29
 17a:	cf 91       	pop	r28
 17c:	08 95       	ret

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
