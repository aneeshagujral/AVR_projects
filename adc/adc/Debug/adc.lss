
adc.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000350  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002a  00800060  00000350  000003c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  000003f0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000090  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000020  00000000  00000000  00000b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 0000008b  00000000  00000000  00000b6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000004b8  00000000  00000000  00000bf7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000018a  00000000  00000000  000010af  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000051c  00000000  00000000  00001239  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a0  00000000  00000000  00001758  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000138  00000000  00000000  000017f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011c  00000000  00000000  00001930  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 00000038  00000000  00000000  00001a4c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 38       	cpi	r26, 0x8A	; 138
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  7a:	0c 94 a6 01 	jmp	0x34c	; 0x34c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <adc_init>:
 }

void adc_init()
{

ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  82:	87 e8       	ldi	r24, 0x87	; 135
  84:	86 b9       	out	0x06, r24	; 6
}
  86:	08 95       	ret

00000088 <adc_read>:
int adc_read(unsigned char ch)
{

 ADMUX=0x40|ch;
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	87 b9       	out	0x07, r24	; 7
 ADCSRA|=(1<<ADSC);
  8c:	36 9a       	sbi	0x06, 6	; 6
 while(!(ADCSRA&(1<<ADIF)));
  8e:	34 9b       	sbis	0x06, 4	; 6
  90:	fe cf       	rjmp	.-4      	; 0x8e <adc_read+0x6>
ADCSRA|=(1<<ADIF);
  92:	34 9a       	sbi	0x06, 4	; 6

 return(ADC);
  94:	24 b1       	in	r18, 0x04	; 4
  96:	35 b1       	in	r19, 0x05	; 5
 }
  98:	82 2f       	mov	r24, r18
  9a:	93 2f       	mov	r25, r19
  9c:	08 95       	ret

0000009e <lcd_command>:

void lcd_command(char A)
{
LCD=A&0xF0;
  9e:	98 2f       	mov	r25, r24
  a0:	90 7f       	andi	r25, 0xF0	; 240
  a2:	92 bb       	out	0x12, r25	; 18
LCD&=~(1<<RS);
  a4:	90 98       	cbi	0x12, 0	; 18
LCD&=~(1<<RW);
  a6:	91 98       	cbi	0x12, 1	; 18
LCD|=(1<<EN);
  a8:	92 9a       	sbi	0x12, 2	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	e9 ef       	ldi	r30, 0xF9	; 249
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	31 97       	sbiw	r30, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_command+0x10>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_command+0x16>
  b4:	00 00       	nop
_delay_ms(1);
LCD&=~(1<<EN);
  b6:	92 98       	cbi	0x12, 2	; 18
  b8:	e9 ef       	ldi	r30, 0xF9	; 249
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <lcd_command+0x1e>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <lcd_command+0x24>
  c2:	00 00       	nop
_delay_ms(1);

LCD=(A<<4)&0xF0;
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	82 95       	swap	r24
  c8:	92 95       	swap	r25
  ca:	90 7f       	andi	r25, 0xF0	; 240
  cc:	98 27       	eor	r25, r24
  ce:	80 7f       	andi	r24, 0xF0	; 240
  d0:	98 27       	eor	r25, r24
  d2:	82 bb       	out	0x12, r24	; 18

LCD&=~(1<<RS);
  d4:	90 98       	cbi	0x12, 0	; 18
LCD&=~(1<<RW);
  d6:	91 98       	cbi	0x12, 1	; 18
LCD|=(1<<EN);
  d8:	92 9a       	sbi	0x12, 2	; 18
  da:	89 ef       	ldi	r24, 0xF9	; 249
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <lcd_command+0x40>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <lcd_command+0x46>
  e4:	00 00       	nop
_delay_ms(1);
LCD&=~(1<<EN);
  e6:	92 98       	cbi	0x12, 2	; 18
  e8:	e9 ef       	ldi	r30, 0xF9	; 249
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	31 97       	sbiw	r30, 0x01	; 1
  ee:	f1 f7       	brne	.-4      	; 0xec <lcd_command+0x4e>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <lcd_command+0x54>
  f2:	00 00       	nop
_delay_ms(1);

}
  f4:	08 95       	ret

000000f6 <lcd_init>:
	return 0;

}
void lcd_init()
{
lcd_command(0x02);
  f6:	82 e0       	ldi	r24, 0x02	; 2
  f8:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_command>
lcd_command(0x28);
  fc:	88 e2       	ldi	r24, 0x28	; 40
  fe:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_command>
lcd_command(0x0C);
 102:	8c e0       	ldi	r24, 0x0C	; 12
 104:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_command>
lcd_command(0x01);
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_command>
lcd_command(0x84);
 10e:	84 e8       	ldi	r24, 0x84	; 132
 110:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_command>
}
 114:	08 95       	ret

00000116 <lcd_data>:

}

void lcd_data(char A)
{
LCD=A&0xF0;
 116:	98 2f       	mov	r25, r24
 118:	90 7f       	andi	r25, 0xF0	; 240
 11a:	92 bb       	out	0x12, r25	; 18
LCD|=(1<<RS);
 11c:	90 9a       	sbi	0x12, 0	; 18
LCD&=~(1<<RW);
 11e:	91 98       	cbi	0x12, 1	; 18
LCD|=(1<<EN);
 120:	92 9a       	sbi	0x12, 2	; 18
 122:	e9 ef       	ldi	r30, 0xF9	; 249
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	31 97       	sbiw	r30, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_data+0x10>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <lcd_data+0x16>
 12c:	00 00       	nop
_delay_ms(1);
LCD&=~(1<<EN);
 12e:	92 98       	cbi	0x12, 2	; 18
 130:	e9 ef       	ldi	r30, 0xF9	; 249
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	31 97       	sbiw	r30, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <lcd_data+0x1e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <lcd_data+0x24>
 13a:	00 00       	nop
_delay_ms(1);

LCD=(A<<4)&0xF0;
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	82 95       	swap	r24
 140:	92 95       	swap	r25
 142:	90 7f       	andi	r25, 0xF0	; 240
 144:	98 27       	eor	r25, r24
 146:	80 7f       	andi	r24, 0xF0	; 240
 148:	98 27       	eor	r25, r24
 14a:	82 bb       	out	0x12, r24	; 18

LCD|=(1<<RS);
 14c:	90 9a       	sbi	0x12, 0	; 18
LCD&=~(1<<RW);
 14e:	91 98       	cbi	0x12, 1	; 18
LCD|=(1<<EN);
 150:	92 9a       	sbi	0x12, 2	; 18
 152:	89 ef       	ldi	r24, 0xF9	; 249
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <lcd_data+0x40>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <lcd_data+0x46>
 15c:	00 00       	nop
_delay_ms(1);
LCD&=~(1<<EN);
 15e:	92 98       	cbi	0x12, 2	; 18
}
 160:	08 95       	ret

00000162 <digicount>:
i++;
}
}

void digicount(unsigned int x)
{
 162:	cf 92       	push	r12
 164:	df 92       	push	r13
 166:	ef 92       	push	r14
 168:	ff 92       	push	r15
 16a:	0f 93       	push	r16
 16c:	1f 93       	push	r17
 16e:	cf 93       	push	r28
 170:	df 93       	push	r29
 172:	ec 01       	movw	r28, r24
lcd_command(0x04);
 174:	84 e0       	ldi	r24, 0x04	; 4
 176:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_command>
unsigned int i;
while(x!=0)
 17a:	20 97       	sbiw	r28, 0x00	; 0
 17c:	91 f0       	breq	.+36     	; 0x1a2 <digicount+0x40>
{
i=x%10;
 17e:	0a e0       	ldi	r16, 0x0A	; 10
 180:	10 e0       	ldi	r17, 0x00	; 0
 182:	ce 01       	movw	r24, r28
 184:	b8 01       	movw	r22, r16
 186:	0e 94 92 01 	call	0x324	; 0x324 <__udivmodhi4>
 18a:	e6 2e       	mov	r14, r22
 18c:	f7 2e       	mov	r15, r23
lcd_data(i+48);
 18e:	80 5d       	subi	r24, 0xD0	; 208
 190:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_data>
x=x/10;
 194:	ce 2c       	mov	r12, r14
 196:	e6 01       	movw	r28, r12
 198:	6e 01       	movw	r12, r28
 19a:	df 2c       	mov	r13, r15
 19c:	e6 01       	movw	r28, r12

void digicount(unsigned int x)
{
lcd_command(0x04);
unsigned int i;
while(x!=0)
 19e:	20 97       	sbiw	r28, 0x00	; 0
 1a0:	81 f7       	brne	.-32     	; 0x182 <digicount+0x20>
{
i=x%10;
lcd_data(i+48);
x=x/10;
}
lcd_command(0x06);
 1a2:	86 e0       	ldi	r24, 0x06	; 6
 1a4:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_command>
 
 }
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	1f 91       	pop	r17
 1ae:	0f 91       	pop	r16
 1b0:	ff 90       	pop	r15
 1b2:	ef 90       	pop	r14
 1b4:	df 90       	pop	r13
 1b6:	cf 90       	pop	r12
 1b8:	08 95       	ret

000001ba <lcd_string>:
lcd_command(0x01);
lcd_command(0x84);
}

void lcd_string(char *str)
{
 1ba:	cf 93       	push	r28
 1bc:	df 93       	push	r29
 1be:	ec 01       	movw	r28, r24
int i=0;
while (str[i]!='\0')
 1c0:	88 81       	ld	r24, Y
 1c2:	88 23       	and	r24, r24
 1c4:	31 f0       	breq	.+12     	; 0x1d2 <lcd_string+0x18>
lcd_command(0x0C);
lcd_command(0x01);
lcd_command(0x84);
}

void lcd_string(char *str)
 1c6:	21 96       	adiw	r28, 0x01	; 1
{
int i=0;
while (str[i]!='\0')
{
lcd_data(str[i]);
 1c8:	0e 94 8b 00 	call	0x116	; 0x116 <lcd_data>
}

void lcd_string(char *str)
{
int i=0;
while (str[i]!='\0')
 1cc:	89 91       	ld	r24, Y+
 1ce:	88 23       	and	r24, r24
 1d0:	d9 f7       	brne	.-10     	; 0x1c8 <lcd_string+0xe>
{
lcd_data(str[i]);
i++;
}
}
 1d2:	df 91       	pop	r29
 1d4:	cf 91       	pop	r28
 1d6:	08 95       	ret

000001d8 <parameter1>:


void parameter1(int x,int y)
    {

 if((x>400)&&(x<=570)&&(y>340)&&(y<=500))
 1d8:	28 2f       	mov	r18, r24
 1da:	39 2f       	mov	r19, r25
 1dc:	c9 01       	movw	r24, r18
 1de:	21 59       	subi	r18, 0x91	; 145
 1e0:	31 40       	sbci	r19, 0x01	; 1
 1e2:	2a 3a       	cpi	r18, 0xAA	; 170
 1e4:	31 05       	cpc	r19, r1
 1e6:	58 f4       	brcc	.+22     	; 0x1fe <parameter1+0x26>
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	65 35       	cpi	r22, 0x55	; 85
 1ec:	72 07       	cpc	r23, r18
 1ee:	3c f0       	brlt	.+14     	; 0x1fe <parameter1+0x26>
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	65 3f       	cpi	r22, 0xF5	; 245
 1f4:	72 07       	cpc	r23, r18
 1f6:	1c f4       	brge	.+6      	; 0x1fe <parameter1+0x26>
 {
 PORTB=0b00000101;
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	88 bb       	out	0x18, r24	; 24
 1fc:	08 95       	ret
 }

 else if((x>570)&&(x<=600)&&(y>250)&&(y<=340))
 1fe:	9c 01       	movw	r18, r24
 200:	2b 53       	subi	r18, 0x3B	; 59
 202:	32 40       	sbci	r19, 0x02	; 2
 204:	2e 31       	cpi	r18, 0x1E	; 30
 206:	31 05       	cpc	r19, r1
 208:	50 f4       	brcc	.+20     	; 0x21e <parameter1+0x46>
 20a:	6b 3f       	cpi	r22, 0xFB	; 251
 20c:	71 05       	cpc	r23, r1
 20e:	3c f0       	brlt	.+14     	; 0x21e <parameter1+0x46>
 210:	21 e0       	ldi	r18, 0x01	; 1
 212:	65 35       	cpi	r22, 0x55	; 85
 214:	72 07       	cpc	r23, r18
 216:	1c f4       	brge	.+6      	; 0x21e <parameter1+0x46>
 {     
 PORTB=0b00001001;
 218:	89 e0       	ldi	r24, 0x09	; 9
 21a:	88 bb       	out	0x18, r24	; 24
 21c:	08 95       	ret
 }

 else if((x>600)&&(x<=680)&&(y>250)&&(y<=320))
 21e:	89 55       	subi	r24, 0x59	; 89
 220:	92 40       	sbci	r25, 0x02	; 2
 222:	80 35       	cpi	r24, 0x50	; 80
 224:	91 05       	cpc	r25, r1
 226:	48 f4       	brcc	.+18     	; 0x23a <parameter1+0x62>
 228:	6b 3f       	cpi	r22, 0xFB	; 251
 22a:	71 05       	cpc	r23, r1
 22c:	34 f0       	brlt	.+12     	; 0x23a <parameter1+0x62>
 22e:	21 e0       	ldi	r18, 0x01	; 1
 230:	61 34       	cpi	r22, 0x41	; 65
 232:	72 07       	cpc	r23, r18
 234:	14 f4       	brge	.+4      	; 0x23a <parameter1+0x62>
 {
 PORTB=0b00000000;
 236:	18 ba       	out	0x18, r1	; 24
 238:	08 95       	ret
 }

 else if((x>600)&&(x<=660)&&(y>320)&&(y<=360))
 23a:	8c 33       	cpi	r24, 0x3C	; 60
 23c:	91 05       	cpc	r25, r1
 23e:	58 f4       	brcc	.+22     	; 0x256 <parameter1+0x7e>
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	61 34       	cpi	r22, 0x41	; 65
 244:	78 07       	cpc	r23, r24
 246:	3c f0       	brlt	.+14     	; 0x256 <parameter1+0x7e>
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	69 36       	cpi	r22, 0x69	; 105
 24c:	72 07       	cpc	r23, r18
 24e:	1c f4       	brge	.+6      	; 0x256 <parameter1+0x7e>
 {
 PORTB=0b00001010;
 250:	8a e0       	ldi	r24, 0x0A	; 10
 252:	88 bb       	out	0x18, r24	; 24
 254:	08 95       	ret
 }
 else
 {
 PORTB=0b00000110;
 256:	86 e0       	ldi	r24, 0x06	; 6
 258:	88 bb       	out	0x18, r24	; 24
 25a:	08 95       	ret

0000025c <main>:
void parameter1(int,int);



int main()
{
 25c:	8f 92       	push	r8
 25e:	9f 92       	push	r9
 260:	af 92       	push	r10
 262:	bf 92       	push	r11
 264:	cf 92       	push	r12
 266:	df 92       	push	r13
 268:	ef 92       	push	r14
 26a:	ff 92       	push	r15
 26c:	0f 93       	push	r16
 26e:	1f 93       	push	r17
 270:	cf 93       	push	r28
 272:	df 93       	push	r29
DDRB=0xFF;
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	87 bb       	out	0x17, r24	; 23
DDRD=0xFF;
 278:	81 bb       	out	0x11, r24	; 17
 
 int a,b;
 lcd_init();
 27a:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_init>
 adc_init();
 27e:	0e 94 41 00 	call	0x82	; 0x82 <adc_init>
 
 while(1)
 {
 //// value of x
	DDRA=0b00000101;
 282:	0f 2e       	mov	r0, r31
 284:	f5 e0       	ldi	r31, 0x05	; 5
 286:	bf 2e       	mov	r11, r31
 288:	f0 2d       	mov	r31, r0
	PORTA=0b00000011;
 28a:	0f 2e       	mov	r0, r31
 28c:	f3 e0       	ldi	r31, 0x03	; 3
 28e:	af 2e       	mov	r10, r31
 290:	f0 2d       	mov	r31, r0
  	a=adc_read(1);
	lcd_command(0x80);
	lcd_string("x-axis              ");
 292:	0f 2e       	mov	r0, r31
 294:	f0 e6       	ldi	r31, 0x60	; 96
 296:	ef 2e       	mov	r14, r31
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	ff 2e       	mov	r15, r31
 29c:	f0 2d       	mov	r31, r0
  	digicount(a);
	_delay_ms(50);
	
 //// value of y
 
  	DDRA=0b00001010;
 29e:	0f 2e       	mov	r0, r31
 2a0:	fa e0       	ldi	r31, 0x0A	; 10
 2a2:	9f 2e       	mov	r9, r31
 2a4:	f0 2d       	mov	r31, r0
	PORTA=0b00000110;
 2a6:	0f 2e       	mov	r0, r31
 2a8:	f6 e0       	ldi	r31, 0x06	; 6
 2aa:	8f 2e       	mov	r8, r31
 2ac:	f0 2d       	mov	r31, r0
  	int b=adc_read(2);
	lcd_command(0xC0);
	lcd_string("y-axis              ");
 2ae:	0f 2e       	mov	r0, r31
 2b0:	f5 e7       	ldi	r31, 0x75	; 117
 2b2:	cf 2e       	mov	r12, r31
 2b4:	f0 e0       	ldi	r31, 0x00	; 0
 2b6:	df 2e       	mov	r13, r31
 2b8:	f0 2d       	mov	r31, r0
 adc_init();
 
 while(1)
 {
 //// value of x
	DDRA=0b00000101;
 2ba:	ba ba       	out	0x1a, r11	; 26
	PORTA=0b00000011;
 2bc:	ab ba       	out	0x1b, r10	; 27
  	a=adc_read(1);
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 44 00 	call	0x88	; 0x88 <adc_read>
 2c4:	ec 01       	movw	r28, r24
	lcd_command(0x80);
 2c6:	80 e8       	ldi	r24, 0x80	; 128
 2c8:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_command>
	lcd_string("x-axis              ");
 2cc:	c7 01       	movw	r24, r14
 2ce:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_string>
  	lcd_command(0x8F);
 2d2:	8f e8       	ldi	r24, 0x8F	; 143
 2d4:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_command>
  	digicount(a);
 2d8:	ce 01       	movw	r24, r28
 2da:	0e 94 b1 00 	call	0x162	; 0x162 <digicount>
 2de:	83 ed       	ldi	r24, 0xD3	; 211
 2e0:	90 e3       	ldi	r25, 0x30	; 48
 2e2:	01 97       	sbiw	r24, 0x01	; 1
 2e4:	f1 f7       	brne	.-4      	; 0x2e2 <main+0x86>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0x8c>
 2e8:	00 00       	nop
	_delay_ms(50);
	
 //// value of y
 
  	DDRA=0b00001010;
 2ea:	9a ba       	out	0x1a, r9	; 26
	PORTA=0b00000110;
 2ec:	8b ba       	out	0x1b, r8	; 27
  	int b=adc_read(2);
 2ee:	82 e0       	ldi	r24, 0x02	; 2
 2f0:	0e 94 44 00 	call	0x88	; 0x88 <adc_read>
 2f4:	8c 01       	movw	r16, r24
	lcd_command(0xC0);
 2f6:	80 ec       	ldi	r24, 0xC0	; 192
 2f8:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_command>
	lcd_string("y-axis              ");
 2fc:	c6 01       	movw	r24, r12
 2fe:	0e 94 dd 00 	call	0x1ba	; 0x1ba <lcd_string>
  	lcd_command(0xCF);
 302:	8f ec       	ldi	r24, 0xCF	; 207
 304:	0e 94 4f 00 	call	0x9e	; 0x9e <lcd_command>
  	digicount(b);
 308:	c8 01       	movw	r24, r16
 30a:	0e 94 b1 00 	call	0x162	; 0x162 <digicount>
 30e:	83 ed       	ldi	r24, 0xD3	; 211
 310:	90 e3       	ldi	r25, 0x30	; 48
 312:	01 97       	sbiw	r24, 0x01	; 1
 314:	f1 f7       	brne	.-4      	; 0x312 <main+0xb6>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0xbc>
 318:	00 00       	nop
	_delay_ms(50);
	
	parameter1(a,b);	
 31a:	ce 01       	movw	r24, r28
 31c:	b8 01       	movw	r22, r16
 31e:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <parameter1>
 322:	cb cf       	rjmp	.-106    	; 0x2ba <main+0x5e>

00000324 <__udivmodhi4>:
 324:	aa 1b       	sub	r26, r26
 326:	bb 1b       	sub	r27, r27
 328:	51 e1       	ldi	r21, 0x11	; 17
 32a:	07 c0       	rjmp	.+14     	; 0x33a <__udivmodhi4_ep>

0000032c <__udivmodhi4_loop>:
 32c:	aa 1f       	adc	r26, r26
 32e:	bb 1f       	adc	r27, r27
 330:	a6 17       	cp	r26, r22
 332:	b7 07       	cpc	r27, r23
 334:	10 f0       	brcs	.+4      	; 0x33a <__udivmodhi4_ep>
 336:	a6 1b       	sub	r26, r22
 338:	b7 0b       	sbc	r27, r23

0000033a <__udivmodhi4_ep>:
 33a:	88 1f       	adc	r24, r24
 33c:	99 1f       	adc	r25, r25
 33e:	5a 95       	dec	r21
 340:	a9 f7       	brne	.-22     	; 0x32c <__udivmodhi4_loop>
 342:	80 95       	com	r24
 344:	90 95       	com	r25
 346:	bc 01       	movw	r22, r24
 348:	cd 01       	movw	r24, r26
 34a:	08 95       	ret

0000034c <_exit>:
 34c:	f8 94       	cli

0000034e <__stop_program>:
 34e:	ff cf       	rjmp	.-2      	; 0x34e <__stop_program>
