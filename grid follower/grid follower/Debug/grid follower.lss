
grid follower.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000152  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000090  00000000  00000000  00000874  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000020  00000000  00000000  00000904  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000044  00000000  00000000  00000924  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000002ec  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000150  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000301  00000000  00000000  00000da4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000010a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000011f  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c0  00000000  00000000  00001227  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 00000038  00000000  00000000  000012e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 69 00 	call	0xd2	; 0xd2 <main>
  64:	0c 94 a7 00 	jmp	0x14e	; 0x14e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <stop>:
  }
  return 0;
}
void stop()
{
	PORTB=0b00000000;
  6c:	18 ba       	out	0x18, r1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  6e:	8f e7       	ldi	r24, 0x7F	; 127
  70:	94 e8       	ldi	r25, 0x84	; 132
  72:	ae e1       	ldi	r26, 0x1E	; 30
  74:	81 50       	subi	r24, 0x01	; 1
  76:	90 40       	sbci	r25, 0x00	; 0
  78:	a0 40       	sbci	r26, 0x00	; 0
  7a:	e1 f7       	brne	.-8      	; 0x74 <stop+0x8>
  7c:	00 c0       	rjmp	.+0      	; 0x7e <stop+0x12>
  7e:	00 00       	nop
	_delay_ms(10000);
}
  80:	08 95       	ret

00000082 <straight>:
void straight()
{
	PORTB=0b00000101;
  82:	85 e0       	ldi	r24, 0x05	; 5
  84:	88 bb       	out	0x18, r24	; 24
  86:	8f e7       	ldi	r24, 0x7F	; 127
  88:	94 e8       	ldi	r25, 0x84	; 132
  8a:	ae e1       	ldi	r26, 0x1E	; 30
  8c:	81 50       	subi	r24, 0x01	; 1
  8e:	90 40       	sbci	r25, 0x00	; 0
  90:	a0 40       	sbci	r26, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <straight+0xa>
  94:	00 c0       	rjmp	.+0      	; 0x96 <straight+0x14>
  96:	00 00       	nop
	_delay_ms(10000);
}
  98:	08 95       	ret

0000009a <right>:
void right()	
{
	PORTB=0b00000110;
  9a:	86 e0       	ldi	r24, 0x06	; 6
  9c:	88 bb       	out	0x18, r24	; 24
  9e:	8f e7       	ldi	r24, 0x7F	; 127
  a0:	94 e8       	ldi	r25, 0x84	; 132
  a2:	ae e1       	ldi	r26, 0x1E	; 30
  a4:	81 50       	subi	r24, 0x01	; 1
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	a0 40       	sbci	r26, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <right+0xa>
  ac:	00 c0       	rjmp	.+0      	; 0xae <right+0x14>
  ae:	00 00       	nop
	_delay_ms(10000);
	straight();
  b0:	0e 94 41 00 	call	0x82	; 0x82 <straight>
}
  b4:	08 95       	ret

000000b6 <left>:
void left()
{
	
	PORTB=0b00001001;
  b6:	89 e0       	ldi	r24, 0x09	; 9
  b8:	88 bb       	out	0x18, r24	; 24
  ba:	8f e7       	ldi	r24, 0x7F	; 127
  bc:	94 e8       	ldi	r25, 0x84	; 132
  be:	ae e1       	ldi	r26, 0x1E	; 30
  c0:	81 50       	subi	r24, 0x01	; 1
  c2:	90 40       	sbci	r25, 0x00	; 0
  c4:	a0 40       	sbci	r26, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <left+0xa>
  c8:	00 c0       	rjmp	.+0      	; 0xca <left+0x14>
  ca:	00 00       	nop
	_delay_ms(10000);
	straight();
  cc:	0e 94 41 00 	call	0x82	; 0x82 <straight>
}
  d0:	08 95       	ret

000000d2 <main>:
void left();
void stop();
void counter();
void three();
int main(void)
{
  d2:	ef 92       	push	r14
  d4:	ff 92       	push	r15
  d6:	0f 93       	push	r16
  d8:	1f 93       	push	r17
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  DDRB=0xff;
  de:	8f ef       	ldi	r24, 0xFF	; 255
  e0:	87 bb       	out	0x17, r24	; 23
  DDRA=0x00;	//ir
  e2:	1a ba       	out	0x1a, r1	; 26
		a:	straight();
		j++;
		if(j==3)
		{
			right();
			j=0;
  e4:	ee 24       	eor	r14, r14
  e6:	ff 24       	eor	r15, r15
  int i;
  while(1)
  {
	  int i,j;
	c:  
	if((PINA&(0b00000011))==0b00000011)
  e8:	89 b3       	in	r24, 0x19	; 25
  ea:	83 70       	andi	r24, 0x03	; 3
  ec:	83 30       	cpi	r24, 0x03	; 3
  ee:	19 f4       	brne	.+6      	; 0xf6 <main+0x24>
	  {
		  left();
  f0:	0e 94 5b 00 	call	0xb6	; 0xb6 <left>
  f4:	14 c0       	rjmp	.+40     	; 0x11e <main+0x4c>
		 
		  
	  }
	else if((PINA&(0b00000100))==0b00000100)
  f6:	ca 9b       	sbis	0x19, 2	; 25
  f8:	03 c0       	rjmp	.+6      	; 0x100 <main+0x2e>
	  {
		  right();
  fa:	0e 94 4d 00 	call	0x9a	; 0x9a <right>
  fe:	0f c0       	rjmp	.+30     	; 0x11e <main+0x4c>
	  }
	else if((PINA&(0b00000111))==0b00000111)
 100:	89 b3       	in	r24, 0x19	; 25
 102:	87 70       	andi	r24, 0x07	; 7
 104:	87 30       	cpi	r24, 0x07	; 7
 106:	19 f4       	brne	.+6      	; 0x10e <main+0x3c>
	  {
		 stop();
 108:	0e 94 36 00 	call	0x6c	; 0x6c <stop>
 10c:	08 c0       	rjmp	.+16     	; 0x11e <main+0x4c>
	  }	
	  else if((PINA&(0b00000000))==0b00000000)
 10e:	89 b3       	in	r24, 0x19	; 25
			{
				left();
				i=0;
			}goto c;
		
		a:	straight();
 110:	0e 94 41 00 	call	0x82	; 0x82 <straight>
		j++;
 114:	21 96       	adiw	r28, 0x01	; 1
		if(j==3)
 116:	c3 30       	cpi	r28, 0x03	; 3
 118:	d1 05       	cpc	r29, r1
 11a:	31 f7       	brne	.-52     	; 0xe8 <main+0x16>
 11c:	14 c0       	rjmp	.+40     	; 0x146 <main+0x74>
	  {
		  right();
		  
	  }
	  	
		b:  straight();
 11e:	0e 94 41 00 	call	0x82	; 0x82 <straight>
		  
		  i++;
 122:	0f 5f       	subi	r16, 0xFF	; 255
 124:	1f 4f       	sbci	r17, 0xFF	; 255
 126:	8f e9       	ldi	r24, 0x9F	; 159
 128:	96 e8       	ldi	r25, 0x86	; 134
 12a:	a1 e0       	ldi	r26, 0x01	; 1
 12c:	81 50       	subi	r24, 0x01	; 1
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	a0 40       	sbci	r26, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x5a>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x64>
 136:	00 00       	nop
		  _delay_ms(500);
		  if(i==3)
 138:	03 30       	cpi	r16, 0x03	; 3
 13a:	11 05       	cpc	r17, r1
 13c:	a9 f6       	brne	.-86     	; 0xe8 <main+0x16>
			{
				left();
 13e:	0e 94 5b 00 	call	0xb6	; 0xb6 <left>
				i=0;
 142:	87 01       	movw	r16, r14
 144:	d1 cf       	rjmp	.-94     	; 0xe8 <main+0x16>
		
		a:	straight();
		j++;
		if(j==3)
		{
			right();
 146:	0e 94 4d 00 	call	0x9a	; 0x9a <right>
			j=0;
 14a:	e7 01       	movw	r28, r14
 14c:	cd cf       	rjmp	.-102    	; 0xe8 <main+0x16>

0000014e <_exit>:
 14e:	f8 94       	cli

00000150 <__stop_program>:
 150:	ff cf       	rjmp	.-2      	; 0x150 <__stop_program>
